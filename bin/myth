#!/usr/bin/env node

var colors = require('colors');
var fs = require('fs');
var myth = require('..');
var program = require('commander');
var read = require('read-file-stdin');
var watch = require('node-watch');
var write = require('write-file-stdout');

/**
 * Usage.
 */

program
  .version(require('../package').version)
  .usage('[<input>] [<output>]')
  .option('-w, --watch', 'watch the input file')
  .option('-v, --verbose', 'write verbose output');

/**
 * Examples.
 */

program.on('--help', function () {
  console.log('  Examples:');
  console.log();
  console.log('    # pass an input and output file');
  console.log('    $ myth input.css output.css');
  console.log();
  console.log('    # watch for changes');
  console.log('    $ myth --watch input.css output.css');
  console.log();
  console.log('    # stdin and stdout');
  console.log('    $ cat input.css | myth | grep background-color');
  console.log();
});

/**
 * Parse.
 */

program.parse(process.argv);

/**
 * Settings.
 */

var input;
var output;

if (program.args.length) {
  input = program.args[0];
  output = program.args[1];
}

var verbose = program.verbose;
var regen = program.watch && input && output;

/**
 * Run & regen?
 */

run();
if (regen) watch(input, run);

/**
 * Run for the given input and output.
 */

function run () {
  read(input, function (err, buffer) {
    if (err && err.code == 'ENOENT') return log(input + ' does not exist.');
    if (err) throw err;
    write(output, myth(buffer.toString()));
    if (verbose && output) log(output + ' was written.');
  });
}

/**
 * Log a `string` in style.
 *
 * @param {String} string
 */

var logged;

function log (string) {
  if (!logged) {
    console.log();
    process.on('exit', function () { console.log(); });
    logged = true;
  }

  console.log('  Myth: '.blue + string);
}
