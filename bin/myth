#!/usr/bin/env node

var fs = require('fs');
var colors = require('colors');
var myth = require('..');
var program = require('commander');
var stdin = require('stdin');

/**
 * Program.
 */

program
  .version(require('../package').version)
  .usage('[<input>] [<output>]')
  .option('-w, --watch', 'watch the input file')
  .on('--help', function () {
    console.log('  Examples:');
    console.log();
    console.log('    # pass an input and output file');
    console.log('    $ myth input.css output.css');
    console.log();
    console.log('    # watch for changes');
    console.log('    $ myth --watch input.css output.css');
    console.log();
    console.log('    # stdin and stdout');
    console.log('    $ cat index.css | myth | grep .button');
    console.log();
  })
  .parse(process.argv);

/**
 * Settings.
 */

var input = program.args[0];
var output = program.args[1];
var watch = program.watch;

/**
 * Logging.
 */

if (output) {
  console.log();
  process.on('exit', function () { console.log(); });
}

/**
 * Run & watch?
 */

run();
if (watch && input && output) fs.watch(input, run);

/**
 * Run.
 */

function run () {
  read(input, function (err, css) {
    if (err) throw err;
    write(output, myth(css));
  });
}

/**
 * Read from a `file`, falling back to stdin.
 *
 * @param {String} file
 * @param {Function} callback
 */

function read (file, callback) {
  if (file) {
    fs.readFile(file, function (err, data) {
      callback(err, data.toString());
    });
  } else {
    stdin(function (str) {
      callback(null, str);
    });
  }
}

/**
 * Write `css` to a `file`, falling back to stdout.
 *
 * @param {String} file
 * @param {String} css
 */

function write (file, css) {
  if (!file) process.stdout.write(css);
  fs.writeFileSync(file, css);
  if (output) log(output);
}

/**
 * Log a `string`.
 *
 * @param {String} string
 */

function log (string) {
  console.log('  Myth:  '.blue + string);
}